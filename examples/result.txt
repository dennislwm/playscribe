# SUMMARY
A presentation by Kevin discusses GitLab's reference architectures, focusing on key concepts, components, and deployment strategies for high availability and disaster recovery.

# IDEAS:
- GitLab offers self-managed, dedicated, and SaaS solutions.
- Omnibus is GitLab's bundled package for service installation.
- High availability (HA) ensures infrastructure tolerates outages without performance hits.
- Reference architectures are designed to support a specific number of users with redundancy.
- Disaster recovery (DR) strategies are crucial for catastrophic outages.
- RPO (Recovery Point Objective) and RTO (Recovery Time Objective) are critical metrics in disaster scenarios.
- Single-node setups can be more manageable for smaller user bases.
- GitLab's architecture includes multiple services like Puma, Redis, and PostgreSQL.
- Kubernetes can enhance scalability but adds complexity.
- Geo allows for geographically distributed users to access GitLab efficiently.
- Active-active configurations can distribute load but require careful management.
- Cloud services like AWS can reduce infrastructure footprint significantly.
- GitLab's architecture can support both high availability and disaster recovery.
- Monitoring tools like Prometheus and Grafana are essential for maintaining system health.
- The cost of deploying GitLab can be substantial, especially for high availability setups.
- Customers often underestimate the infrastructure needed for HA solutions.

# QUOTES:
- "GitLab is quite a complex stack with a lot of pieces."
- "High availability is your infrastructure being designed in a way that can tolerate outages."
- "Our reference architectures are intentionally designed to meet HA qualifications."
- "The lower those numbers are, the more expensive the infrastructure is."
- "For most standard customers, our reference architectures are overkill."
- "If you want HA, you have to manage 25 servers and $330,000 in VM costs."
- "Kubernetes supports double the request per second for the infrastructure."
- "Geo can act and look like the primary for geographically distributed users."
- "You can fail over very quickly with Geo; it's just one command."
- "The replication keeps going on, and you can make sure that you see it's in 100% sync."
- "GitLab's architecture is complex because there are so many services that have to be installed."
- "You can use Geo to migrate if you've already got a Geo environment running."
- "The cost of deploying GitLab is significant, especially for high availability setups."
- "You want to make sure your primary is big enough to support your secondary nodes."
- "With proper planning, you can fail over very quickly."

# FACTS:
- GitLab has three offerings: self-managed, dedicated, and SaaS.
- Omnibus is a single file used to install all GitLab services.
- High availability can be achieved within a region but not across regions without downtime.
- RPO can be as low as 15 minutes with Geo.
- A traditional 3K reference architecture may require around $60,000 in VM costs upfront.
- GitLab uses PostgreSQL extensively across its architecture.
- The average data replication lag time with Geo is within minutes.
- GitLab's architecture includes components like Puma, Redis, and Workhorse.
- The cost of deploying a 3K reference architecture on AWS can reach $29,000 just for VMs.
- Kubernetes deployments require careful consideration of user counts and infrastructure needs.

# REFERENCES:
- GitLab's Omnibus package
- GitLab's reference architecture documentation
- Prometheus and Grafana for monitoring
- AWS services like Elasticache and RDS
- GitLab's environment toolkit
- Implementation Services learning path
- Hands-On Workshop for deploying a 3K reference architecture

# RECOMMENDATIONS:
- Consider single-node setups for environments with fewer than 2,000 users.
- Use cloud services to reduce infrastructure costs and complexity.
- Monitor RPO and RTO closely to ensure disaster recovery effectiveness.
- Engage in discovery sessions to understand customer needs before scoping architectures.
- Educate customers on the complexities of high availability and disaster recovery.
- Utilize monitoring tools to maintain system health and performance.
- Plan for significant infrastructure management when opting for high availability solutions.
- Encourage customers to evaluate their actual usage against standard user counts when designing architectures.
