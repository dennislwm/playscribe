# SUMMARY
A software designer discusses how using contracts can improve design clarity and simplicity, helping developers communicate and identify complexities in their work.

# IDEAS:
- Becoming a good software designer often feels frustrating and slow.
- Contracts can reveal hidden complexities in software design.
- They help separate concerns and improve communication among team members.
- Writing contracts makes design issues more visible to everyone.
- Contracts can guide developers towards simpler designs.
- Short contracts are preferred over convoluted ones.
- Contracts encourage uniformity in handling edge cases.
- They promote decomposing complex methods into simpler ones.
- Contracts help ensure functions operate on a complete domain.
- Minimizing side effects leads to easier reasoning about code.
- Contracts can highlight surprising elements in the code.
- Teams using contracts develop a vocabulary around predicates and invariants.
- A structured approach to design can lead to clearer modules.
- Contracts can serve as a tool for simplifying thought processes.
- Writing down design rules aids in team communication.
- Contracts can help identify better places to implement logic changes.

# QUOTES:
- "If wishes were horses beggars would ride."
- "Contracts are like an invisible hand that is guiding your design."
- "By writing down the contracts and making them visible they can open your eyes."
- "You are the force of simplicity."
- "We hate typing long contracts and we seek short ones."
- "The act of trying to find that short sweet contract is going to cause us to do a couple things."
- "Contracts influence us to minimize side effects."
- "When you start thinking in contracts, you start trying to find ways to say well this is a big problem to solve."
- "Even if you can't find a really good place to put the complication, the contract is at least telling you."
- "Using contracts or thinking in contracts has this invisible force on your design."
- "When teams are thinking about contracts top of mind, they start having designs that look like this."
- "It's great at communicating the design that you've got with the rest of the co-workers."
- "Contracts aren't foolproof but they can help guide you towards simpler designs."
- "They help us make our design simple."
- "Contracts reveal the messy parts."

# FACTS:
- Many developers struggle with becoming proficient in software design.
- Contracts can help identify when a proposed code change complicates existing logic.
- The concept of total functions is relevant in functional programming.
- Pure functions are easier to reason about than those with side effects.
- Clear contracts can lead to better testing and understanding of code.
- Teams that use contracts often develop a shared language around their designs.
- Factoring out common statements in contracts can simplify code maintenance.
- The separation of concerns is crucial for effective software design.
- Using contracts can lead to clearer module dependencies in software architecture.
- Writing design documentation alongside code improves team communication.

# REFERENCES:
- The concept of contracts in software design.
- The idea of predicates and invariants in programming.
- The practice of writing README.md or design.md files for code documentation.

# RECOMMENDATIONS:
- Consider using contracts as a guiding principle in software design.
- Aim for simplicity by seeking short and clear contracts.
- Decompose complex methods into simpler, more manageable parts.
- Minimize side effects in functions for easier reasoning.
- Use contracts to facilitate discussions about design changes with colleagues.
- Document design rules alongside your code for better team communication.
- Encourage a shared vocabulary around predicates and invariants within your team.
- Regularly review and refine contracts to ensure they remain relevant and clear.
- Explore functional programming principles to enhance your understanding of contracts.
- Use contracts as a tool for identifying potential bugs before they arise.
