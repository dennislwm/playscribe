# SUMMARY
A Duo chat session featuring Aaron and Yan discusses challenges with GitLab API compatibility across different versions and extensions, focusing on user experience issues.

# IDEAS:
- The problem arises from discrepancies between self-managed and GitLab.com versions.
- Self-managed users may be several milestones behind, causing compatibility issues.
- The GitLab CLI and editor extensions need to handle version compatibility.
- A language server could centralize API changes, reducing redundancy.
- Backward compatibility is crucial for extension queries to avoid breaking changes.
- Testing against older versions of the API is challenging but necessary.
- Experimental fields in APIs do not guarantee stability for production users.
- Slash commands in the UI library must also be backward compatible.
- Community Edition users may lack access to certain features despite being on the latest version.
- Documentation for developers needs improvement to cover shared UI components and versioning issues.

# QUOTES:
- "It's caused some frustrations where you get little quirks in the UX."
- "We still have to do the testing and make sure they're robust enough."
- "This is just an architecture product; the way our product works will stay with us."
- "A minor little change... what could possibly go wrong?"
- "Updating their GitLab instance would have resolved the issue."
- "We should have a fallback provided on the client side."
- "The current tests are basically just testing the Happy Path."
- "There's no safety net when you're using the public fields."
- "Even if you are working behind the experimental flag, it's not going to save you."
- "Make sure your queries that are called from the extensions are backwards compatible."

# FACTS:
- Self-managed instances can run one milestone behind GitLab.com.
- The GitLab API can change between versions, affecting extension functionality.
- Community Edition users may not have access to Enterprise-only features.
- The GitLab CLI and extensions authenticate against different API versions.
- Integration testing often does not cover older self-managed instances by default.

# REFERENCES:
- GitLab CLI
- GitLab language server
- Duo chat API
- GraphQL API
- GitLab UI shared components

# RECOMMENDATIONS:
- Ensure all extension queries are backward compatible with older API versions.
- Implement a query builder to manage version-specific fields more efficiently.
- Create Docker images that mock old versions of the GraphQL schema for testing.
- Improve documentation for developers regarding versioning and compatibility issues.
- Regularly check for experimental fields in production code to avoid breaking changes.
