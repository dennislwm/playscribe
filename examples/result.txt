# SUMMARY
George discusses the importance of intellectual control in programming, contrasting it with statistical control, and emphasizes the need for reasoning alongside testing.

# IDEAS:
- Edsger Dijkstra emphasized the need for intellectual control in programming.
- Programming practices have remained surprisingly similar over the past 25 years.
- Smalltalk included features like lambdas and data flow operators long before Java.
- Regular code delivery every two weeks was practiced 25 years ago.
- Regression test suites are now common, providing confidence in code changes.
- Manual testing was used as a double-check rather than the primary method of assurance.
- Intellectual control involves understanding code before running it.
- Statistical control relies on running code to gain confidence in its functionality.
- Over-reliance on testing may lead to diminished reasoning about code.
- Complexity in projects tends to build up over time, making it harder to maintain control.
- Refactoring is not a solution for lost intellectual control; it only preserves behavior.
- Projects often drift towards statistical control without conscious decision-making.
- Maintaining intellectual control can help manage complexity effectively.
- The balance between intellectual and statistical control is crucial for project success.
- Property-based and model-based testing can help maintain intellectual control.
- Cultural factors within teams can influence the level of intellectual control maintained.

# QUOTES:
- "We should be paying attention to intellectual control."
- "Surprisingly it was pretty similar to what you're doing today."
- "We were doing delivery every two weeks."
- "Almost everybody would say we all have regression test suites today."
- "I feel worried that actually everything is okay because by definition we can't test everything."
- "Intellectual control as Dijkstra was talking about is before you run the code do you have good confidence it's gonna do what you expect."
- "Statistical control you run the code once or many times and because you've run it in representative cases you give yourself confidence."
- "Our reliance on testing has numbed us to the fact that we're doing less reasoning than we used to."
- "Once a project loses its intellectual control, very few teams have either the money or the time to recover."
- "Complexity builds up over time on projects."
- "Refactoring can't change those requirements."
- "If you look at your project and you suspect that you actually have low amounts of intellectual control..."
- "What we're really shooting for is something like a nice balance of reasoning and testing."

# FACTS:
- Dijkstra's structured programming eliminated the use of go-to statements.
- Many programming languages have had features like lambdas for decades.
- Testing practices have evolved significantly over the last 25 years.
- The complexity of software projects increases super-linearly as more modules are added.
- Intellectual control can help manage complexity effectively in software development.
- The state space of an entire program is larger than that of individual modules.
- Property-based testing encourages maintaining abstractions in tests.
- Cultural biases can influence how teams approach complexity and reasoning.

# REFERENCES:
- Edsger Dijkstra's Turing Award lecture on intellectual control.
- Smalltalk programming language features.
- Papers written by George on his website discussing these topics.

# RECOMMENDATIONS:
- Foster a culture that values intellectual control in programming practices.
- Encourage discussions around structured programming and its benefits.
- Implement property-based and model-based testing to maintain intellectual control.
- Regularly assess processes to ensure they promote intellectual control.
- Avoid over-reliance on testing as a substitute for understanding code.
- Stay proactive in managing complexity through consistent refactoring and simplification efforts. 
- Recognize the signs of losing intellectual control early to prevent project stagnation.
